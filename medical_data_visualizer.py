# -*- coding: utf-8 -*-
"""medical_data_visualizer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UK7DPDwXOIEwWkqU5B5HqGvsbFFQZGl9
"""

from google.colab import files

uploaded_file = files.upload()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

# Step 1: Load the data and reformat it
# Since the CSV you provided lists features as rows, we need to transpose it first.
raw_df = pd.read_csv('medical_examination.csv')

# Transform the DataFrame so that each feature is a column
df = raw_df.set_index('Feature').transpose()

# Convert values back to numeric types where necessary
df['age'] = df['age'].astype(int)
df['height'] = df['height'].astype(int)
df['weight'] = df['weight'].astype(float)
df['gender'] = df['gender'].astype(int)
df['ap_hi'] = df['ap_hi'].astype(int)
df['ap_lo'] = df['ap_lo'].astype(int)
df['cholesterol'] = df['cholesterol'].astype(int)
df['gluc'] = df['gluc'].astype(int)
df['smoke'] = df['smoke'].astype(int)
df['alco'] = df['alco'].astype(int)
df['active'] = df['active'].astype(int)
df['cardio'] = df['cardio'].astype(int)

# Step 2: Add an overweight column to the DataFrame
# Calculate BMI: BMI = weight (kg) / height (m)^2
df['overweight'] = df['weight'] / ((df['height'] / 100) ** 2)
# Assign 1 if overweight (BMI > 25) else 0
df['overweight'] = df['overweight'].apply(lambda x: 1 if x > 25 else 0)

# Step 3: Normalize data by making 0 always good and 1 always bad.
# If the value of cholesterol or gluc is 1, set it to 0. If it is more than 1, set it to 1.
df['cholesterol'] = df['cholesterol'].apply(lambda x: 0 if x == 1 else 1)
df['gluc'] = df['gluc'].apply(lambda x: 0 if x == 1 else 1)

# Step 4: Draw the Categorical Plot in the `draw_cat_plot` function
def draw_cat_plot():
    # Create a DataFrame for the cat plot using `pd.melt` with values from cholesterol, gluc, smoke, alco, active, and overweight.
    df_cat = pd.melt(df, id_vars=['cardio'],
                     value_vars=['cholesterol', 'gluc', 'smoke', 'alco', 'active', 'overweight'])

    # Group and reformat the data to split it by cardio. Show the counts of each feature.
    df_cat['total'] = 1
    df_cat = df_cat.groupby(['cardio', 'variable', 'value'], as_index=False).count()

    # Draw the catplot with `sns.catplot()`
    fig = sns.catplot(x="variable", y="total", hue="value", col="cardio", data=df_cat, kind="bar").fig
    return fig

# Step 5: Draw the Heat Map in the `draw_heat_map` function
def draw_heat_map():
    # Clean the data
    df_heat = df[(df['ap_lo'] <= df['ap_hi']) &
                 (df['height'] >= df['height'].quantile(0.025)) &
                 (df['height'] <= df['height'].quantile(0.975)) &
                 (df['weight'] >= df['weight'].quantile(0.025)) &
                 (df['weight'] <= df['weight'].quantile(0.975))]

    # Calculate the correlation matrix
    corr = df_heat.corr()

    # Generate a mask for the upper triangle
    mask = np.triu(np.ones_like(corr, dtype=bool))

    # Set up the matplotlib figure
    fig, ax = plt.subplots(figsize=(12, 8))

    # Draw the heatmap with `sns.heatmap()`
    sns.heatmap(corr, mask=mask, annot=True, fmt='.1f', center=0, cmap='coolwarm', square=True)
    return fig